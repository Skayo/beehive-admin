import { API_URL } from '@beehive/constants';
import RestClient from 'another-rest-client';

const singularize = (str) => str.endsWith('s') ? str.substr(0, str.length - 1) : str;

const client = new RestClient(API_URL);
client.res([
	'hives',
	'bees',
	'chains',
	'actions',
]);

const api = {
	relations: {
		// resourceName: {
		//   localKey: relatedResourceName
		// }
		bees:    {
			namespace: 'hives',
		},
		chains:  {
			actions: 'actions',
		},
		actions: {
			bee: 'bees',
		},
	},

	async _getRelated(res, records) {
		if (this.relations.hasOwnProperty(res)) {
			let cache = {};

			for (let [localKey, relatedRes] of Object.entries(this.relations[res])) {
				for (let i = 0; i < records.length; i++) {
					if (records[i].hasOwnProperty(localKey)) {

						let relatedRecords = [];
						if (cache.hasOwnProperty(relatedRes)) {
							relatedRecords = cache[relatedRes];
						} else {
							relatedRecords = await this.findAll(relatedRes, true);
							cache[relatedRes] = relatedRecords;
						}

						if (Array.isArray(records[i][localKey])) {
							for (let a = 0; a < records[i][localKey].length; a++) {
								for (let b = 0; b < relatedRecords.length; b++) {
									if (relatedRecords[b].id === records[i][localKey][a]) {
										records[i][localKey][a] = relatedRecords[b];
									}
								}
							}
						} else {
							for (let b = 0; b < relatedRecords.length; b++) {
								if (relatedRecords[b].id === records[i][localKey]) {
									records[i][localKey] = relatedRecords[b];
								}
							}
						}

					}
				}
			}
		}

		return records;
	},

	async find(res, id) {
		const response = await client[res](id).get().then(response => response[res]);
		const records = await this._getRelated(res, response);

		return records[0];
	},

	async findAll(res, withoutRelated = false) {
		const response = await client[res].get().then(response => response[res]);
		return withoutRelated ? response : await this._getRelated(res, response);
	},

	async update(res, id, props) {
		if (this.relations.hasOwnProperty(res)) {
			for (let key of Object.keys(this.relations[res])) {
				props[key] = undefined;
				delete props[key];
			}
		}

		let data = {};
		data[singularize(res)] = props;

		const response = await client[res](id).put(data).then(response => response[res]);
		const records = await this._getRelated(res, response);

		return records[0];
	},

	delete(res, id) {
		return client[res](id).delete();
	},
};

export default api;