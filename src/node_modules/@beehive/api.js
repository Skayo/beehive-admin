import { API_URL } from '@beehive/constants';
import RestClient from 'another-rest-client';

const singularize = (str) => str.endsWith('s') ? str.substr(0, str.length - 1) : str;

const client = new RestClient(API_URL);
client.res([
	'hives',
	'bees',
	'chains',
	'actions',
]);

const api = {
	relations: {
		// resName: {
		//   localKey: relatedResName
		// }
		bees:    {
			namespace: 'hives',
		},
		chains:  {
			actions: 'actions',
		},
		actions: {
			bee: 'bees',
		},
	},

	async _getRelated(res, records) {
		if (this.relations.hasOwnProperty(res)) {
			let cache = {};

			for (let [localKey, relatedRes] of Object.entries(this.relations[res])) {
				for (let i in records) {
					if (records[i].hasOwnProperty(localKey)) {


						let relatedRecords = [];
						if (cache.hasOwnProperty(relatedRes)) {
							relatedRecords = cache[relatedRes];
						} else {
							relatedRecords = await this.findAll(relatedRes, { withoutRelated: true });
							cache[relatedRes] = relatedRecords;
						}

						for (let j in relatedRecords) {
							if (relatedRecords[j].id === records[i][localKey]) {
								records[i][localKey] = relatedRecords[j];
							}
						}

					}
				}
			}
		}

		return records;
	},

	async find(res, id, opts = {}) {
		const response = await client[res](id).get().then(response => response[res]);
		const records = opts.withoutRelated ? response : await this._getRelated(res, response);

		return records[0];
	},

	async findAll(res, opts = {}) {
		const response = await client[res].get().then(response => response[res]);
		let records = opts.withoutRelated ? response : await this._getRelated(res, response);

		if (opts.where) {
			records = records.filter(item => {
				for (let [whereKey, whereVal] of Object.entries(opts.where)) {
					if (!item.hasOwnProperty(whereKey) || item[whereKey] !== whereVal) {
						return false;
					}
				}

				return true;
			});
		}

		return records;
	},

	async update(res, id, props, opts = {}) {
		if (this.relations.hasOwnProperty(res)) {
			for (let key of Object.keys(this.relations[res])) {
				props[key] = undefined;
				delete props[key];
			}
		}

		let data = {};
		data[singularize(res)] = props;

		const response = await client[res](id).put(data).then(response => response[res]);
		const records = opts.withoutRelated ? response : await this._getRelated(res, response);

		return records[0];
	},

	delete(res, id) {
		return client[res](id).delete();
	}
};

export default api;